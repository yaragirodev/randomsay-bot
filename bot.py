import sqlite3
import random
import re
import logging
import asyncio

from telegram import Update
from telegram.error import Forbidden
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
BOT_TOKEN = ""
# –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
ADMIN_PASSWORD = "–ø" # <-- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô –ü–ê–†–û–õ–¨

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    with sqlite3.connect('bot_database.db') as conn:
        cursor = conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–ª–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS words (
                word TEXT PRIMARY KEY
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                last_message TEXT,
                last_message_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()

def add_words_to_db(text: str):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    cleaned_text = re.sub(r'[^–∞-—è–ê-–Øa-zA-Z\s]', '', text).lower()
    words = {word for word in cleaned_text.split() if len(word) > 2}

    if not words:
        return

    with sqlite3.connect('bot_database.db') as conn:
        cursor = conn.cursor()
        for word in words:
            cursor.execute("INSERT OR IGNORE INTO words (word) VALUES (?)", (word,))
        conn.commit()

def get_random_words(seed_words: list = None) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã seed_words, –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –≤ –æ—Ç–≤–µ—Ç.
    """
    with sqlite3.connect('bot_database.db') as conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        cursor.execute("SELECT COUNT(*) FROM words")
        total_words = cursor.fetchone()[0]

        # –ï—Å–ª–∏ —Å–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –≤—ã—Ö–æ–¥–∏–º
        if total_words < 5:
            return []

        reply_words = []
        num_random_words = random.randint(3, 7)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ "–ø–æ—Ö–æ–∂–∏—Ö" —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if seed_words:
            random.shuffle(seed_words)
            for i in range(random.randint(1, 2)):
                if seed_words:
                    reply_words.append(seed_words.pop())

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ–π –±–∞–∑—ã
        words_to_fetch = num_random_words - len(reply_words)
        if words_to_fetch > 0:
            cursor.execute("SELECT word FROM words ORDER BY RANDOM() LIMIT ?", (words_to_fetch,))
            random_db_words = [row[0] for row in cursor.fetchall()]
            reply_words.extend(random_db_words)

        random.shuffle(reply_words)
        return reply_words

def add_user_to_db(user_id: int, username: str, last_message: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    with sqlite3.connect('bot_database.db') as conn:
        cursor = conn.cursor()
        if last_message:
            cursor.execute(
                """INSERT INTO users (user_id, username, last_message) 
                   VALUES (?, ?, ?) 
                   ON CONFLICT(user_id) 
                   DO UPDATE SET username=excluded.username, last_message=excluded.last_message, last_message_time=CURRENT_TIMESTAMP""",
                (user_id, username, last_message)
            )
        else:
            cursor.execute(
                "INSERT INTO users (user_id, username) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET username=excluded.username",
                (user_id, username)
            )
        conn.commit()

def get_all_users() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
    with sqlite3.connect('bot_database.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, username, last_message FROM users ORDER BY last_message_time DESC")
        return cursor.fetchall()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    add_user_to_db(user.id, user.username)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è –Ω–∞ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. "
        "–ü–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –±—É–¥—É –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–ª–æ–≤–∞ –∏ –æ—Ç–≤–µ—á–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏. üß†\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å!"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    user_text = update.message.text

    if not user_text:
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ª–æ–≤–∞ –≤ –ë–î
    add_user_to_db(user.id, user.username, user_text)
    add_words_to_db(user_text)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–ø–æ—Ö–æ–∂–∏–µ" —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    user_words = [word for word in re.sub(r'[^–∞-—è–ê-–Øa-zA-Z\s]', '', user_text).lower().split() if len(word) > 2]
    reply_words = get_random_words(seed_words=user_words)

    if len(reply_words) < 3:
        await update.message.reply_text("–ü–æ–∫–∞ —É –º–µ–Ω—è –º–∞–ª–æ —Å–ª–æ–≤... –ù–∞–ø–∏—à–∏ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å! üòÖ")
    else:
        reply = ' '.join(reply_words).capitalize() + '.'
        await update.message.reply_text(reply)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /status. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É.
    –¢—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å: /status [–ø–∞—Ä–æ–ª—å]
    """
    try:
        password = context.args[0]
        if password != ADMIN_PASSWORD:
            await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
            return
    except (IndexError, TypeError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /status [–ø–∞—Ä–æ–ª—å]")
        return

    users = get_all_users()
    user_count = len(users)
    
    message = f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
    message += f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}\n\n"
    message += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"

    if not users:
        message += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
        await update.message.reply_text(message, parse_mode='HTML')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    user_messages = []
    for user_id, username, last_message in users:
        username_display = f"@{username}" if username else f"ID:{user_id}"
        last_msg_display = last_message if last_message else "–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        last_msg_display = last_msg_display.replace('<', '&lt;').replace('>', '&gt;')
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        truncated_msg = (last_msg_display[:50] + '...') if len(last_msg_display) > 50 else last_msg_display
        user_messages.append(f"{username_display} - {truncated_msg}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await update.message.reply_text(message, parse_mode='HTML')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Å—Ç—è–º–∏
    chunk_size = 10  # –ø–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    for i in range(0, len(user_messages), chunk_size):
        chunk = user_messages[i:i + chunk_size]
        await update.message.reply_text("\n".join(chunk), parse_mode='HTML')

async def say(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /say. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –¢—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å: /say [–ø–∞—Ä–æ–ª—å] [—Å–æ–æ–±—â–µ–Ω–∏–µ]
    """
    try:
        password = context.args[0]
        if password != ADMIN_PASSWORD:
            await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
            return

        message_to_send = " ".join(context.args[1:])
        if not message_to_send:
            raise IndexError

    except (IndexError, TypeError):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /say [–ø–∞—Ä–æ–ª—å] [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
        return

    users = get_all_users()
    if not users:
        await update.message.reply_text("–ë–æ—Ç –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–∫–æ–º—É.")
        return

    await update.message.reply_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}. –û–∂–∏–¥–∞–π—Ç–µ...")
    
    success_count = 0
    failed_count = 0
    
    for user_id, _, _ in users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_to_send)
            success_count += 1
            await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram
        except Forbidden:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            failed_count += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed_count += 1

    await update.message.reply_text(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"üëé –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}",
        parse_mode='Markdown'
    )

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    init_db()

    app = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("say", say))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    main()
